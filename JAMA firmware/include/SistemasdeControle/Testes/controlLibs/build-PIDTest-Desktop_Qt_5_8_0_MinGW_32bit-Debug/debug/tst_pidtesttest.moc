/****************************************************************************
** Meta object code from reading C++ file 'tst_pidtesttest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_pidtesttest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_PIDTestTest_t {
    QByteArrayData data[26];
    char stringdata0[403];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_PIDTestTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_PIDTestTest_t qt_meta_stringdata_PIDTestTest = {
    {
QT_MOC_LITERAL(0, 0, 11), // "PIDTestTest"
QT_MOC_LITERAL(1, 12, 16), // "constructorCase1"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 16), // "constructorCase2"
QT_MOC_LITERAL(4, 47, 13), // "setSampleTime"
QT_MOC_LITERAL(5, 61, 9), // "setLimits"
QT_MOC_LITERAL(6, 71, 14), // "setParamsCase1"
QT_MOC_LITERAL(7, 86, 14), // "setParamsCase2"
QT_MOC_LITERAL(8, 101, 13), // "getSampleTime"
QT_MOC_LITERAL(9, 115, 13), // "getErrorValue"
QT_MOC_LITERAL(10, 129, 23), // "getDerivativeErrorValue"
QT_MOC_LITERAL(11, 153, 21), // "getIntegralErrorValue"
QT_MOC_LITERAL(12, 175, 9), // "getLimits"
QT_MOC_LITERAL(13, 185, 9), // "getParams"
QT_MOC_LITERAL(14, 195, 13), // "OutputControl"
QT_MOC_LITERAL(15, 209, 14), // "operatorString"
QT_MOC_LITERAL(16, 224, 21), // "tunningZieglerNichols"
QT_MOC_LITERAL(17, 246, 18), // "tunningCHRServo0OV"
QT_MOC_LITERAL(18, 265, 19), // "tunningCHRServo20OV"
QT_MOC_LITERAL(19, 285, 21), // "tunningCHRRegulatorio"
QT_MOC_LITERAL(20, 307, 16), // "tunningCohenCoon"
QT_MOC_LITERAL(21, 324, 15), // "tunningIAELopes"
QT_MOC_LITERAL(22, 340, 16), // "tunningITAELopes"
QT_MOC_LITERAL(23, 357, 16), // "tunningIAERovira"
QT_MOC_LITERAL(24, 374, 17), // "tunningITAERovira"
QT_MOC_LITERAL(25, 392, 10) // "tunningIMC"

    },
    "PIDTestTest\0constructorCase1\0\0"
    "constructorCase2\0setSampleTime\0setLimits\0"
    "setParamsCase1\0setParamsCase2\0"
    "getSampleTime\0getErrorValue\0"
    "getDerivativeErrorValue\0getIntegralErrorValue\0"
    "getLimits\0getParams\0OutputControl\0"
    "operatorString\0tunningZieglerNichols\0"
    "tunningCHRServo0OV\0tunningCHRServo20OV\0"
    "tunningCHRRegulatorio\0tunningCohenCoon\0"
    "tunningIAELopes\0tunningITAELopes\0"
    "tunningIAERovira\0tunningITAERovira\0"
    "tunningIMC"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_PIDTestTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      24,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  134,    2, 0x08 /* Private */,
       3,    0,  135,    2, 0x08 /* Private */,
       4,    0,  136,    2, 0x08 /* Private */,
       5,    0,  137,    2, 0x08 /* Private */,
       6,    0,  138,    2, 0x08 /* Private */,
       7,    0,  139,    2, 0x08 /* Private */,
       8,    0,  140,    2, 0x08 /* Private */,
       9,    0,  141,    2, 0x08 /* Private */,
      10,    0,  142,    2, 0x08 /* Private */,
      11,    0,  143,    2, 0x08 /* Private */,
      12,    0,  144,    2, 0x08 /* Private */,
      13,    0,  145,    2, 0x08 /* Private */,
      14,    0,  146,    2, 0x08 /* Private */,
      15,    0,  147,    2, 0x08 /* Private */,
      16,    0,  148,    2, 0x08 /* Private */,
      17,    0,  149,    2, 0x08 /* Private */,
      18,    0,  150,    2, 0x08 /* Private */,
      19,    0,  151,    2, 0x08 /* Private */,
      20,    0,  152,    2, 0x08 /* Private */,
      21,    0,  153,    2, 0x08 /* Private */,
      22,    0,  154,    2, 0x08 /* Private */,
      23,    0,  155,    2, 0x08 /* Private */,
      24,    0,  156,    2, 0x08 /* Private */,
      25,    0,  157,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void PIDTestTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        PIDTestTest *_t = static_cast<PIDTestTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->constructorCase1(); break;
        case 1: _t->constructorCase2(); break;
        case 2: _t->setSampleTime(); break;
        case 3: _t->setLimits(); break;
        case 4: _t->setParamsCase1(); break;
        case 5: _t->setParamsCase2(); break;
        case 6: _t->getSampleTime(); break;
        case 7: _t->getErrorValue(); break;
        case 8: _t->getDerivativeErrorValue(); break;
        case 9: _t->getIntegralErrorValue(); break;
        case 10: _t->getLimits(); break;
        case 11: _t->getParams(); break;
        case 12: _t->OutputControl(); break;
        case 13: _t->operatorString(); break;
        case 14: _t->tunningZieglerNichols(); break;
        case 15: _t->tunningCHRServo0OV(); break;
        case 16: _t->tunningCHRServo20OV(); break;
        case 17: _t->tunningCHRRegulatorio(); break;
        case 18: _t->tunningCohenCoon(); break;
        case 19: _t->tunningIAELopes(); break;
        case 20: _t->tunningITAELopes(); break;
        case 21: _t->tunningIAERovira(); break;
        case 22: _t->tunningITAERovira(); break;
        case 23: _t->tunningIMC(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject PIDTestTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_PIDTestTest.data,
      qt_meta_data_PIDTestTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *PIDTestTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *PIDTestTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_PIDTestTest.stringdata0))
        return static_cast<void*>(const_cast< PIDTestTest*>(this));
    return QObject::qt_metacast(_clname);
}

int PIDTestTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 24)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 24;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 24)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 24;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
