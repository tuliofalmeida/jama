/****************************************************************************
** Meta object code from reading C++ file 'tst_arxdoubletest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.14.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_arxdoubletest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.14.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_ArxDoubleTest_t {
    QByteArrayData data[62];
    char stringdata0[1115];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_ArxDoubleTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_ArxDoubleTest_t qt_meta_stringdata_ArxDoubleTest = {
    {
QT_MOC_LITERAL(0, 0, 13), // "ArxDoubleTest"
QT_MOC_LITERAL(1, 14, 2), // "SS"
QT_MOC_LITERAL(2, 17, 0), // ""
QT_MOC_LITERAL(3, 18, 20), // "voidConstructorCase1"
QT_MOC_LITERAL(4, 39, 20), // "voidConstructorCase2"
QT_MOC_LITERAL(5, 60, 20), // "voidConstructorCase3"
QT_MOC_LITERAL(6, 81, 20), // "voidConstructorCase4"
QT_MOC_LITERAL(7, 102, 20), // "voidConstructorCase5"
QT_MOC_LITERAL(8, 123, 20), // "voidConstructorCase6"
QT_MOC_LITERAL(9, 144, 15), // "copyConstructor"
QT_MOC_LITERAL(10, 160, 24), // "copyConstructorOtherType"
QT_MOC_LITERAL(11, 185, 14), // "copyAssignment"
QT_MOC_LITERAL(12, 200, 23), // "copyAssignmentOtherType"
QT_MOC_LITERAL(13, 224, 21), // "stringConversionCase1"
QT_MOC_LITERAL(14, 246, 21), // "stringConversionCase2"
QT_MOC_LITERAL(15, 268, 21), // "stringConversionCase3"
QT_MOC_LITERAL(16, 290, 21), // "stringConversionCase4"
QT_MOC_LITERAL(17, 312, 21), // "stringConversionCase5"
QT_MOC_LITERAL(18, 334, 21), // "stringConversionCase6"
QT_MOC_LITERAL(19, 356, 21), // "stringConversionCase7"
QT_MOC_LITERAL(20, 378, 21), // "stringConversionCase8"
QT_MOC_LITERAL(21, 400, 21), // "stringConversionCase9"
QT_MOC_LITERAL(22, 422, 22), // "stringConversionCase10"
QT_MOC_LITERAL(23, 445, 22), // "stringConversionCase11"
QT_MOC_LITERAL(24, 468, 22), // "stringConversionCase12"
QT_MOC_LITERAL(25, 491, 22), // "stringConversionCase13"
QT_MOC_LITERAL(26, 514, 22), // "stringConversionCase14"
QT_MOC_LITERAL(27, 537, 22), // "stringConversionCase15"
QT_MOC_LITERAL(28, 560, 22), // "getNumberOfInputDelays"
QT_MOC_LITERAL(29, 583, 17), // "getNumberOfInputs"
QT_MOC_LITERAL(30, 601, 23), // "getNumberOfOutputDelays"
QT_MOC_LITERAL(31, 625, 18), // "getNumberOfOutputs"
QT_MOC_LITERAL(32, 644, 20), // "getNumberOfVariables"
QT_MOC_LITERAL(33, 665, 12), // "getMaxnInOut"
QT_MOC_LITERAL(34, 678, 10), // "getNSample"
QT_MOC_LITERAL(35, 689, 14), // "getSingleInput"
QT_MOC_LITERAL(36, 704, 15), // "getSingleOutput"
QT_MOC_LITERAL(37, 720, 18), // "getSingleEstOutput"
QT_MOC_LITERAL(38, 739, 7), // "getLmin"
QT_MOC_LITERAL(39, 747, 7), // "getLmax"
QT_MOC_LITERAL(40, 755, 7), // "getStep"
QT_MOC_LITERAL(41, 763, 17), // "getTimeSimulation"
QT_MOC_LITERAL(42, 781, 17), // "getTransportDelay"
QT_MOC_LITERAL(43, 799, 14), // "getInputMatrix"
QT_MOC_LITERAL(44, 814, 15), // "getOutputMatrix"
QT_MOC_LITERAL(45, 830, 18), // "getEstOutputMatrix"
QT_MOC_LITERAL(46, 849, 12), // "getModelCoef"
QT_MOC_LITERAL(47, 862, 15), // "getLinearSystem"
QT_MOC_LITERAL(48, 878, 16), // "getLinearMatrixA"
QT_MOC_LITERAL(49, 895, 18), // "getLinearEqualityB"
QT_MOC_LITERAL(50, 914, 16), // "getLinearVectorA"
QT_MOC_LITERAL(51, 931, 24), // "getLinearEqualityVectorB"
QT_MOC_LITERAL(52, 956, 20), // "getInputLinearVector"
QT_MOC_LITERAL(53, 977, 21), // "getOutputLinearVector"
QT_MOC_LITERAL(54, 999, 14), // "setLinearModel"
QT_MOC_LITERAL(55, 1014, 15), // "setLinearVector"
QT_MOC_LITERAL(56, 1030, 21), // "setInitialOutputValue"
QT_MOC_LITERAL(57, 1052, 11), // "simInScalar"
QT_MOC_LITERAL(58, 1064, 14), // "simInOutScalar"
QT_MOC_LITERAL(59, 1079, 11), // "simInMatrix"
QT_MOC_LITERAL(60, 1091, 14), // "simInOutMatrix"
QT_MOC_LITERAL(61, 1106, 8) // "simRange"

    },
    "ArxDoubleTest\0SS\0\0voidConstructorCase1\0"
    "voidConstructorCase2\0voidConstructorCase3\0"
    "voidConstructorCase4\0voidConstructorCase5\0"
    "voidConstructorCase6\0copyConstructor\0"
    "copyConstructorOtherType\0copyAssignment\0"
    "copyAssignmentOtherType\0stringConversionCase1\0"
    "stringConversionCase2\0stringConversionCase3\0"
    "stringConversionCase4\0stringConversionCase5\0"
    "stringConversionCase6\0stringConversionCase7\0"
    "stringConversionCase8\0stringConversionCase9\0"
    "stringConversionCase10\0stringConversionCase11\0"
    "stringConversionCase12\0stringConversionCase13\0"
    "stringConversionCase14\0stringConversionCase15\0"
    "getNumberOfInputDelays\0getNumberOfInputs\0"
    "getNumberOfOutputDelays\0getNumberOfOutputs\0"
    "getNumberOfVariables\0getMaxnInOut\0"
    "getNSample\0getSingleInput\0getSingleOutput\0"
    "getSingleEstOutput\0getLmin\0getLmax\0"
    "getStep\0getTimeSimulation\0getTransportDelay\0"
    "getInputMatrix\0getOutputMatrix\0"
    "getEstOutputMatrix\0getModelCoef\0"
    "getLinearSystem\0getLinearMatrixA\0"
    "getLinearEqualityB\0getLinearVectorA\0"
    "getLinearEqualityVectorB\0getInputLinearVector\0"
    "getOutputLinearVector\0setLinearModel\0"
    "setLinearVector\0setInitialOutputValue\0"
    "simInScalar\0simInOutScalar\0simInMatrix\0"
    "simInOutMatrix\0simRange"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_ArxDoubleTest[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      60,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  314,    2, 0x08 /* Private */,
       3,    0,  315,    2, 0x08 /* Private */,
       4,    0,  316,    2, 0x08 /* Private */,
       5,    0,  317,    2, 0x08 /* Private */,
       6,    0,  318,    2, 0x08 /* Private */,
       7,    0,  319,    2, 0x08 /* Private */,
       8,    0,  320,    2, 0x08 /* Private */,
       9,    0,  321,    2, 0x08 /* Private */,
      10,    0,  322,    2, 0x08 /* Private */,
      11,    0,  323,    2, 0x08 /* Private */,
      12,    0,  324,    2, 0x08 /* Private */,
      13,    0,  325,    2, 0x08 /* Private */,
      14,    0,  326,    2, 0x08 /* Private */,
      15,    0,  327,    2, 0x08 /* Private */,
      16,    0,  328,    2, 0x08 /* Private */,
      17,    0,  329,    2, 0x08 /* Private */,
      18,    0,  330,    2, 0x08 /* Private */,
      19,    0,  331,    2, 0x08 /* Private */,
      20,    0,  332,    2, 0x08 /* Private */,
      21,    0,  333,    2, 0x08 /* Private */,
      22,    0,  334,    2, 0x08 /* Private */,
      23,    0,  335,    2, 0x08 /* Private */,
      24,    0,  336,    2, 0x08 /* Private */,
      25,    0,  337,    2, 0x08 /* Private */,
      26,    0,  338,    2, 0x08 /* Private */,
      27,    0,  339,    2, 0x08 /* Private */,
      28,    0,  340,    2, 0x08 /* Private */,
      29,    0,  341,    2, 0x08 /* Private */,
      30,    0,  342,    2, 0x08 /* Private */,
      31,    0,  343,    2, 0x08 /* Private */,
      32,    0,  344,    2, 0x08 /* Private */,
      33,    0,  345,    2, 0x08 /* Private */,
      34,    0,  346,    2, 0x08 /* Private */,
      35,    0,  347,    2, 0x08 /* Private */,
      36,    0,  348,    2, 0x08 /* Private */,
      37,    0,  349,    2, 0x08 /* Private */,
      38,    0,  350,    2, 0x08 /* Private */,
      39,    0,  351,    2, 0x08 /* Private */,
      40,    0,  352,    2, 0x08 /* Private */,
      41,    0,  353,    2, 0x08 /* Private */,
      42,    0,  354,    2, 0x08 /* Private */,
      43,    0,  355,    2, 0x08 /* Private */,
      44,    0,  356,    2, 0x08 /* Private */,
      45,    0,  357,    2, 0x08 /* Private */,
      46,    0,  358,    2, 0x08 /* Private */,
      47,    0,  359,    2, 0x08 /* Private */,
      48,    0,  360,    2, 0x08 /* Private */,
      49,    0,  361,    2, 0x08 /* Private */,
      50,    0,  362,    2, 0x08 /* Private */,
      51,    0,  363,    2, 0x08 /* Private */,
      52,    0,  364,    2, 0x08 /* Private */,
      53,    0,  365,    2, 0x08 /* Private */,
      54,    0,  366,    2, 0x08 /* Private */,
      55,    0,  367,    2, 0x08 /* Private */,
      56,    0,  368,    2, 0x08 /* Private */,
      57,    0,  369,    2, 0x08 /* Private */,
      58,    0,  370,    2, 0x08 /* Private */,
      59,    0,  371,    2, 0x08 /* Private */,
      60,    0,  372,    2, 0x08 /* Private */,
      61,    0,  373,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void ArxDoubleTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<ArxDoubleTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->SS(); break;
        case 1: _t->voidConstructorCase1(); break;
        case 2: _t->voidConstructorCase2(); break;
        case 3: _t->voidConstructorCase3(); break;
        case 4: _t->voidConstructorCase4(); break;
        case 5: _t->voidConstructorCase5(); break;
        case 6: _t->voidConstructorCase6(); break;
        case 7: _t->copyConstructor(); break;
        case 8: _t->copyConstructorOtherType(); break;
        case 9: _t->copyAssignment(); break;
        case 10: _t->copyAssignmentOtherType(); break;
        case 11: _t->stringConversionCase1(); break;
        case 12: _t->stringConversionCase2(); break;
        case 13: _t->stringConversionCase3(); break;
        case 14: _t->stringConversionCase4(); break;
        case 15: _t->stringConversionCase5(); break;
        case 16: _t->stringConversionCase6(); break;
        case 17: _t->stringConversionCase7(); break;
        case 18: _t->stringConversionCase8(); break;
        case 19: _t->stringConversionCase9(); break;
        case 20: _t->stringConversionCase10(); break;
        case 21: _t->stringConversionCase11(); break;
        case 22: _t->stringConversionCase12(); break;
        case 23: _t->stringConversionCase13(); break;
        case 24: _t->stringConversionCase14(); break;
        case 25: _t->stringConversionCase15(); break;
        case 26: _t->getNumberOfInputDelays(); break;
        case 27: _t->getNumberOfInputs(); break;
        case 28: _t->getNumberOfOutputDelays(); break;
        case 29: _t->getNumberOfOutputs(); break;
        case 30: _t->getNumberOfVariables(); break;
        case 31: _t->getMaxnInOut(); break;
        case 32: _t->getNSample(); break;
        case 33: _t->getSingleInput(); break;
        case 34: _t->getSingleOutput(); break;
        case 35: _t->getSingleEstOutput(); break;
        case 36: _t->getLmin(); break;
        case 37: _t->getLmax(); break;
        case 38: _t->getStep(); break;
        case 39: _t->getTimeSimulation(); break;
        case 40: _t->getTransportDelay(); break;
        case 41: _t->getInputMatrix(); break;
        case 42: _t->getOutputMatrix(); break;
        case 43: _t->getEstOutputMatrix(); break;
        case 44: _t->getModelCoef(); break;
        case 45: _t->getLinearSystem(); break;
        case 46: _t->getLinearMatrixA(); break;
        case 47: _t->getLinearEqualityB(); break;
        case 48: _t->getLinearVectorA(); break;
        case 49: _t->getLinearEqualityVectorB(); break;
        case 50: _t->getInputLinearVector(); break;
        case 51: _t->getOutputLinearVector(); break;
        case 52: _t->setLinearModel(); break;
        case 53: _t->setLinearVector(); break;
        case 54: _t->setInitialOutputValue(); break;
        case 55: _t->simInScalar(); break;
        case 56: _t->simInOutScalar(); break;
        case 57: _t->simInMatrix(); break;
        case 58: _t->simInOutMatrix(); break;
        case 59: _t->simRange(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject ArxDoubleTest::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_ArxDoubleTest.data,
    qt_meta_data_ArxDoubleTest,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *ArxDoubleTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ArxDoubleTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_ArxDoubleTest.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int ArxDoubleTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 60)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 60;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 60)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 60;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
