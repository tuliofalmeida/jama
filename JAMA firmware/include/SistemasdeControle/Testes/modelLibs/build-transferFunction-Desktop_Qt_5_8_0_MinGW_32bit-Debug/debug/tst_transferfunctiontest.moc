/****************************************************************************
** Meta object code from reading C++ file 'tst_transferfunctiontest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_transferfunctiontest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TransferFunctionTest_t {
    QByteArrayData data[90];
    char stringdata0[2789];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TransferFunctionTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TransferFunctionTest_t qt_meta_stringdata_TransferFunctionTest = {
    {
QT_MOC_LITERAL(0, 0, 20), // "TransferFunctionTest"
QT_MOC_LITERAL(1, 21, 23), // "TFVoidConstructorDouble"
QT_MOC_LITERAL(2, 45, 0), // ""
QT_MOC_LITERAL(3, 46, 28), // "TFRowColumnConstructorDouble"
QT_MOC_LITERAL(4, 75, 26), // "TFPolynomConstructorDouble"
QT_MOC_LITERAL(5, 102, 32), // "TFMatrixPolynomConstructorDouble"
QT_MOC_LITERAL(6, 135, 31), // "TFMatrixNumDenConstructorDouble"
QT_MOC_LITERAL(7, 167, 36), // "TFDiscreteRowColumnConstructo..."
QT_MOC_LITERAL(8, 204, 34), // "TFDiscretePolynomConstructorD..."
QT_MOC_LITERAL(9, 239, 40), // "TFDiscreteMatrixPolynomConstr..."
QT_MOC_LITERAL(10, 280, 39), // "TFDiscreteMatrixNumDenConstru..."
QT_MOC_LITERAL(11, 320, 18), // "isContinuousDouble"
QT_MOC_LITERAL(12, 339, 19), // "getSampleTimeDouble"
QT_MOC_LITERAL(13, 359, 21), // "getNumberOfRowsDouble"
QT_MOC_LITERAL(14, 381, 24), // "getNumberOfColumnsDouble"
QT_MOC_LITERAL(15, 406, 26), // "getNumberOfVariablesDouble"
QT_MOC_LITERAL(16, 433, 23), // "getNumberOfInputsDouble"
QT_MOC_LITERAL(17, 457, 24), // "getNumberOfOutputsDouble"
QT_MOC_LITERAL(18, 482, 23), // "getTimeSimulationDouble"
QT_MOC_LITERAL(19, 506, 19), // "setContinuousDouble"
QT_MOC_LITERAL(20, 526, 19), // "setSampleTimeDouble"
QT_MOC_LITERAL(21, 546, 30), // "operatorParenthesisDoubleCase1"
QT_MOC_LITERAL(22, 577, 30), // "operatorParenthesisDoubleCase2"
QT_MOC_LITERAL(23, 608, 29), // "operatorAtributionDoubleCase1"
QT_MOC_LITERAL(24, 638, 29), // "operatorAtributionDoubleCase2"
QT_MOC_LITERAL(25, 668, 29), // "operatorAtributionDoubleCase3"
QT_MOC_LITERAL(26, 698, 29), // "operatorAtributionDoubleCase4"
QT_MOC_LITERAL(27, 728, 29), // "operatorAtributionDoubleCase5"
QT_MOC_LITERAL(28, 758, 29), // "operatorAtributionDoubleCase6"
QT_MOC_LITERAL(29, 788, 29), // "operatorAtributionDoubleCase7"
QT_MOC_LITERAL(30, 818, 29), // "operatorAtributionDoubleCase8"
QT_MOC_LITERAL(31, 848, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(32, 888, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(33, 928, 35), // "operatorSumAccumulatorTFDoubl..."
QT_MOC_LITERAL(34, 964, 35), // "operatorSumAccumulatorTFDoubl..."
QT_MOC_LITERAL(35, 1000, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(36, 1048, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(37, 1096, 43), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(38, 1140, 43), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(39, 1184, 50), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(40, 1235, 50), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(41, 1286, 46), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(42, 1333, 46), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(43, 1380, 44), // "operatorDivisionAccumulatorSc..."
QT_MOC_LITERAL(44, 1425, 44), // "operatorDivisionAccumulatorSc..."
QT_MOC_LITERAL(45, 1470, 40), // "operatorDivisionAccumulatorTF..."
QT_MOC_LITERAL(46, 1511, 40), // "operatorDivisionAccumulatorTF..."
QT_MOC_LITERAL(47, 1552, 14), // "simInputDouble"
QT_MOC_LITERAL(48, 1567, 20), // "simInputOutputDouble"
QT_MOC_LITERAL(49, 1588, 25), // "simMatrixInputDoubleCase1"
QT_MOC_LITERAL(50, 1614, 25), // "simMatrixInputDoubleCase2"
QT_MOC_LITERAL(51, 1640, 21), // "simMatrixOutputDouble"
QT_MOC_LITERAL(52, 1662, 8), // "simRange"
QT_MOC_LITERAL(53, 1671, 33), // "ContinuosFirstOrderCaracteris..."
QT_MOC_LITERAL(54, 1705, 34), // "ContinuosSecondOrderCaracteri..."
QT_MOC_LITERAL(55, 1740, 18), // "operatorMinusCase1"
QT_MOC_LITERAL(56, 1759, 18), // "operatorMinusCase2"
QT_MOC_LITERAL(57, 1778, 28), // "operatorSumScalarDoubleCase1"
QT_MOC_LITERAL(58, 1807, 28), // "operatorSumScalarDoubleCase2"
QT_MOC_LITERAL(59, 1836, 32), // "operatorSumScalarLeftDoubleCase1"
QT_MOC_LITERAL(60, 1869, 32), // "operatorSumScalarLeftDoubleCase2"
QT_MOC_LITERAL(61, 1902, 24), // "operatorSumTFDoubleCase1"
QT_MOC_LITERAL(62, 1927, 24), // "operatorSumTFDoubleCase2"
QT_MOC_LITERAL(63, 1952, 36), // "operatorSubtractionScalarDoub..."
QT_MOC_LITERAL(64, 1989, 36), // "operatorSubtractionScalarDoub..."
QT_MOC_LITERAL(65, 2026, 40), // "operatorSubtractionScalarLeft..."
QT_MOC_LITERAL(66, 2067, 40), // "operatorSubtractionScalarLeft..."
QT_MOC_LITERAL(67, 2108, 32), // "operatorSubtractionTFDoubleCase1"
QT_MOC_LITERAL(68, 2141, 32), // "operatorSubtractionTFDoubleCase2"
QT_MOC_LITERAL(69, 2174, 39), // "operatorMultiplicationScalarD..."
QT_MOC_LITERAL(70, 2214, 39), // "operatorMultiplicationScalarD..."
QT_MOC_LITERAL(71, 2254, 43), // "operatorMultiplicationScalarL..."
QT_MOC_LITERAL(72, 2298, 43), // "operatorMultiplicationScalarL..."
QT_MOC_LITERAL(73, 2342, 35), // "operatorMultiplicationTFDoubl..."
QT_MOC_LITERAL(74, 2378, 35), // "operatorMultiplicationTFDoubl..."
QT_MOC_LITERAL(75, 2414, 33), // "operatorDivisionScalarDoubleC..."
QT_MOC_LITERAL(76, 2448, 33), // "operatorDivisionScalarDoubleC..."
QT_MOC_LITERAL(77, 2482, 37), // "operatorDivisionScalarLeftDou..."
QT_MOC_LITERAL(78, 2520, 37), // "operatorDivisionScalarLeftDou..."
QT_MOC_LITERAL(79, 2558, 29), // "operatorDivisionTFDoubleCase1"
QT_MOC_LITERAL(80, 2588, 29), // "operatorDivisionTFDoubleCase2"
QT_MOC_LITERAL(81, 2618, 21), // "stringConvertionCase1"
QT_MOC_LITERAL(82, 2640, 21), // "stringConvertionCase2"
QT_MOC_LITERAL(83, 2662, 21), // "stringConvertionCase3"
QT_MOC_LITERAL(84, 2684, 21), // "stringConvertionCase4"
QT_MOC_LITERAL(85, 2706, 4), // "pade"
QT_MOC_LITERAL(86, 2711, 18), // "FOPDTCurvaDeReacao"
QT_MOC_LITERAL(87, 2730, 19), // "FOPDTZieglerNichols"
QT_MOC_LITERAL(88, 2750, 10), // "FOPDTSmith"
QT_MOC_LITERAL(89, 2761, 27) // "FOPDTSundaresanKrishnaswamy"

    },
    "TransferFunctionTest\0TFVoidConstructorDouble\0"
    "\0TFRowColumnConstructorDouble\0"
    "TFPolynomConstructorDouble\0"
    "TFMatrixPolynomConstructorDouble\0"
    "TFMatrixNumDenConstructorDouble\0"
    "TFDiscreteRowColumnConstructorDouble\0"
    "TFDiscretePolynomConstructorDouble\0"
    "TFDiscreteMatrixPolynomConstructorDouble\0"
    "TFDiscreteMatrixNumDenConstructorDouble\0"
    "isContinuousDouble\0getSampleTimeDouble\0"
    "getNumberOfRowsDouble\0getNumberOfColumnsDouble\0"
    "getNumberOfVariablesDouble\0"
    "getNumberOfInputsDouble\0"
    "getNumberOfOutputsDouble\0"
    "getTimeSimulationDouble\0setContinuousDouble\0"
    "setSampleTimeDouble\0operatorParenthesisDoubleCase1\0"
    "operatorParenthesisDoubleCase2\0"
    "operatorAtributionDoubleCase1\0"
    "operatorAtributionDoubleCase2\0"
    "operatorAtributionDoubleCase3\0"
    "operatorAtributionDoubleCase4\0"
    "operatorAtributionDoubleCase5\0"
    "operatorAtributionDoubleCase6\0"
    "operatorAtributionDoubleCase7\0"
    "operatorAtributionDoubleCase8\0"
    "operatorSumAccumulatorScalarDoubleCase1\0"
    "operatorSumAccumulatorScalarDoubleCase2\0"
    "operatorSumAccumulatorTFDoubleCase1\0"
    "operatorSumAccumulatorTFDoubleCase2\0"
    "operatorSubtractionAccumulatorScalarDoubleCase1\0"
    "operatorSubtractionAccumulatorScalarDoubleCase2\0"
    "operatorSubtractionAccumulatorTFDoubleCase1\0"
    "operatorSubtractionAccumulatorTFDoubleCase2\0"
    "operatorMultiplicationAccumulatorScalarDoubleCase1\0"
    "operatorMultiplicationAccumulatorScalarDoubleCase2\0"
    "operatorMultiplicationAccumulatorTFDoubleCase1\0"
    "operatorMultiplicationAccumulatorTFDoubleCase2\0"
    "operatorDivisionAccumulatorScalarDoubleCase1\0"
    "operatorDivisionAccumulatorScalarDoubleCase2\0"
    "operatorDivisionAccumulatorTFDoubleCase1\0"
    "operatorDivisionAccumulatorTFDoubleCase2\0"
    "simInputDouble\0simInputOutputDouble\0"
    "simMatrixInputDoubleCase1\0"
    "simMatrixInputDoubleCase2\0"
    "simMatrixOutputDouble\0simRange\0"
    "ContinuosFirstOrderCaracteristics\0"
    "ContinuosSecondOrderCaracteristics\0"
    "operatorMinusCase1\0operatorMinusCase2\0"
    "operatorSumScalarDoubleCase1\0"
    "operatorSumScalarDoubleCase2\0"
    "operatorSumScalarLeftDoubleCase1\0"
    "operatorSumScalarLeftDoubleCase2\0"
    "operatorSumTFDoubleCase1\0"
    "operatorSumTFDoubleCase2\0"
    "operatorSubtractionScalarDoubleCase1\0"
    "operatorSubtractionScalarDoubleCase2\0"
    "operatorSubtractionScalarLeftDoubleCase1\0"
    "operatorSubtractionScalarLeftDoubleCase2\0"
    "operatorSubtractionTFDoubleCase1\0"
    "operatorSubtractionTFDoubleCase2\0"
    "operatorMultiplicationScalarDoubleCase1\0"
    "operatorMultiplicationScalarDoubleCase2\0"
    "operatorMultiplicationScalarLeftDoubleCase1\0"
    "operatorMultiplicationScalarLeftDoubleCase2\0"
    "operatorMultiplicationTFDoubleCase1\0"
    "operatorMultiplicationTFDoubleCase2\0"
    "operatorDivisionScalarDoubleCase1\0"
    "operatorDivisionScalarDoubleCase2\0"
    "operatorDivisionScalarLeftDoubleCase1\0"
    "operatorDivisionScalarLeftDoubleCase2\0"
    "operatorDivisionTFDoubleCase1\0"
    "operatorDivisionTFDoubleCase2\0"
    "stringConvertionCase1\0stringConvertionCase2\0"
    "stringConvertionCase3\0stringConvertionCase4\0"
    "pade\0FOPDTCurvaDeReacao\0FOPDTZieglerNichols\0"
    "FOPDTSmith\0FOPDTSundaresanKrishnaswamy"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TransferFunctionTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      88,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  454,    2, 0x08 /* Private */,
       3,    0,  455,    2, 0x08 /* Private */,
       4,    0,  456,    2, 0x08 /* Private */,
       5,    0,  457,    2, 0x08 /* Private */,
       6,    0,  458,    2, 0x08 /* Private */,
       7,    0,  459,    2, 0x08 /* Private */,
       8,    0,  460,    2, 0x08 /* Private */,
       9,    0,  461,    2, 0x08 /* Private */,
      10,    0,  462,    2, 0x08 /* Private */,
      11,    0,  463,    2, 0x08 /* Private */,
      12,    0,  464,    2, 0x08 /* Private */,
      13,    0,  465,    2, 0x08 /* Private */,
      14,    0,  466,    2, 0x08 /* Private */,
      15,    0,  467,    2, 0x08 /* Private */,
      16,    0,  468,    2, 0x08 /* Private */,
      17,    0,  469,    2, 0x08 /* Private */,
      18,    0,  470,    2, 0x08 /* Private */,
      19,    0,  471,    2, 0x08 /* Private */,
      20,    0,  472,    2, 0x08 /* Private */,
      21,    0,  473,    2, 0x08 /* Private */,
      22,    0,  474,    2, 0x08 /* Private */,
      23,    0,  475,    2, 0x08 /* Private */,
      24,    0,  476,    2, 0x08 /* Private */,
      25,    0,  477,    2, 0x08 /* Private */,
      26,    0,  478,    2, 0x08 /* Private */,
      27,    0,  479,    2, 0x08 /* Private */,
      28,    0,  480,    2, 0x08 /* Private */,
      29,    0,  481,    2, 0x08 /* Private */,
      30,    0,  482,    2, 0x08 /* Private */,
      31,    0,  483,    2, 0x08 /* Private */,
      32,    0,  484,    2, 0x08 /* Private */,
      33,    0,  485,    2, 0x08 /* Private */,
      34,    0,  486,    2, 0x08 /* Private */,
      35,    0,  487,    2, 0x08 /* Private */,
      36,    0,  488,    2, 0x08 /* Private */,
      37,    0,  489,    2, 0x08 /* Private */,
      38,    0,  490,    2, 0x08 /* Private */,
      39,    0,  491,    2, 0x08 /* Private */,
      40,    0,  492,    2, 0x08 /* Private */,
      41,    0,  493,    2, 0x08 /* Private */,
      42,    0,  494,    2, 0x08 /* Private */,
      43,    0,  495,    2, 0x08 /* Private */,
      44,    0,  496,    2, 0x08 /* Private */,
      45,    0,  497,    2, 0x08 /* Private */,
      46,    0,  498,    2, 0x08 /* Private */,
      47,    0,  499,    2, 0x08 /* Private */,
      48,    0,  500,    2, 0x08 /* Private */,
      49,    0,  501,    2, 0x08 /* Private */,
      50,    0,  502,    2, 0x08 /* Private */,
      51,    0,  503,    2, 0x08 /* Private */,
      52,    0,  504,    2, 0x08 /* Private */,
      53,    0,  505,    2, 0x08 /* Private */,
      54,    0,  506,    2, 0x08 /* Private */,
      55,    0,  507,    2, 0x08 /* Private */,
      56,    0,  508,    2, 0x08 /* Private */,
      57,    0,  509,    2, 0x08 /* Private */,
      58,    0,  510,    2, 0x08 /* Private */,
      59,    0,  511,    2, 0x08 /* Private */,
      60,    0,  512,    2, 0x08 /* Private */,
      61,    0,  513,    2, 0x08 /* Private */,
      62,    0,  514,    2, 0x08 /* Private */,
      63,    0,  515,    2, 0x08 /* Private */,
      64,    0,  516,    2, 0x08 /* Private */,
      65,    0,  517,    2, 0x08 /* Private */,
      66,    0,  518,    2, 0x08 /* Private */,
      67,    0,  519,    2, 0x08 /* Private */,
      68,    0,  520,    2, 0x08 /* Private */,
      69,    0,  521,    2, 0x08 /* Private */,
      70,    0,  522,    2, 0x08 /* Private */,
      71,    0,  523,    2, 0x08 /* Private */,
      72,    0,  524,    2, 0x08 /* Private */,
      73,    0,  525,    2, 0x08 /* Private */,
      74,    0,  526,    2, 0x08 /* Private */,
      75,    0,  527,    2, 0x08 /* Private */,
      76,    0,  528,    2, 0x08 /* Private */,
      77,    0,  529,    2, 0x08 /* Private */,
      78,    0,  530,    2, 0x08 /* Private */,
      79,    0,  531,    2, 0x08 /* Private */,
      80,    0,  532,    2, 0x08 /* Private */,
      81,    0,  533,    2, 0x08 /* Private */,
      82,    0,  534,    2, 0x08 /* Private */,
      83,    0,  535,    2, 0x08 /* Private */,
      84,    0,  536,    2, 0x08 /* Private */,
      85,    0,  537,    2, 0x08 /* Private */,
      86,    0,  538,    2, 0x08 /* Private */,
      87,    0,  539,    2, 0x08 /* Private */,
      88,    0,  540,    2, 0x08 /* Private */,
      89,    0,  541,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TransferFunctionTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TransferFunctionTest *_t = static_cast<TransferFunctionTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->TFVoidConstructorDouble(); break;
        case 1: _t->TFRowColumnConstructorDouble(); break;
        case 2: _t->TFPolynomConstructorDouble(); break;
        case 3: _t->TFMatrixPolynomConstructorDouble(); break;
        case 4: _t->TFMatrixNumDenConstructorDouble(); break;
        case 5: _t->TFDiscreteRowColumnConstructorDouble(); break;
        case 6: _t->TFDiscretePolynomConstructorDouble(); break;
        case 7: _t->TFDiscreteMatrixPolynomConstructorDouble(); break;
        case 8: _t->TFDiscreteMatrixNumDenConstructorDouble(); break;
        case 9: _t->isContinuousDouble(); break;
        case 10: _t->getSampleTimeDouble(); break;
        case 11: _t->getNumberOfRowsDouble(); break;
        case 12: _t->getNumberOfColumnsDouble(); break;
        case 13: _t->getNumberOfVariablesDouble(); break;
        case 14: _t->getNumberOfInputsDouble(); break;
        case 15: _t->getNumberOfOutputsDouble(); break;
        case 16: _t->getTimeSimulationDouble(); break;
        case 17: _t->setContinuousDouble(); break;
        case 18: _t->setSampleTimeDouble(); break;
        case 19: _t->operatorParenthesisDoubleCase1(); break;
        case 20: _t->operatorParenthesisDoubleCase2(); break;
        case 21: _t->operatorAtributionDoubleCase1(); break;
        case 22: _t->operatorAtributionDoubleCase2(); break;
        case 23: _t->operatorAtributionDoubleCase3(); break;
        case 24: _t->operatorAtributionDoubleCase4(); break;
        case 25: _t->operatorAtributionDoubleCase5(); break;
        case 26: _t->operatorAtributionDoubleCase6(); break;
        case 27: _t->operatorAtributionDoubleCase7(); break;
        case 28: _t->operatorAtributionDoubleCase8(); break;
        case 29: _t->operatorSumAccumulatorScalarDoubleCase1(); break;
        case 30: _t->operatorSumAccumulatorScalarDoubleCase2(); break;
        case 31: _t->operatorSumAccumulatorTFDoubleCase1(); break;
        case 32: _t->operatorSumAccumulatorTFDoubleCase2(); break;
        case 33: _t->operatorSubtractionAccumulatorScalarDoubleCase1(); break;
        case 34: _t->operatorSubtractionAccumulatorScalarDoubleCase2(); break;
        case 35: _t->operatorSubtractionAccumulatorTFDoubleCase1(); break;
        case 36: _t->operatorSubtractionAccumulatorTFDoubleCase2(); break;
        case 37: _t->operatorMultiplicationAccumulatorScalarDoubleCase1(); break;
        case 38: _t->operatorMultiplicationAccumulatorScalarDoubleCase2(); break;
        case 39: _t->operatorMultiplicationAccumulatorTFDoubleCase1(); break;
        case 40: _t->operatorMultiplicationAccumulatorTFDoubleCase2(); break;
        case 41: _t->operatorDivisionAccumulatorScalarDoubleCase1(); break;
        case 42: _t->operatorDivisionAccumulatorScalarDoubleCase2(); break;
        case 43: _t->operatorDivisionAccumulatorTFDoubleCase1(); break;
        case 44: _t->operatorDivisionAccumulatorTFDoubleCase2(); break;
        case 45: _t->simInputDouble(); break;
        case 46: _t->simInputOutputDouble(); break;
        case 47: _t->simMatrixInputDoubleCase1(); break;
        case 48: _t->simMatrixInputDoubleCase2(); break;
        case 49: _t->simMatrixOutputDouble(); break;
        case 50: _t->simRange(); break;
        case 51: _t->ContinuosFirstOrderCaracteristics(); break;
        case 52: _t->ContinuosSecondOrderCaracteristics(); break;
        case 53: _t->operatorMinusCase1(); break;
        case 54: _t->operatorMinusCase2(); break;
        case 55: _t->operatorSumScalarDoubleCase1(); break;
        case 56: _t->operatorSumScalarDoubleCase2(); break;
        case 57: _t->operatorSumScalarLeftDoubleCase1(); break;
        case 58: _t->operatorSumScalarLeftDoubleCase2(); break;
        case 59: _t->operatorSumTFDoubleCase1(); break;
        case 60: _t->operatorSumTFDoubleCase2(); break;
        case 61: _t->operatorSubtractionScalarDoubleCase1(); break;
        case 62: _t->operatorSubtractionScalarDoubleCase2(); break;
        case 63: _t->operatorSubtractionScalarLeftDoubleCase1(); break;
        case 64: _t->operatorSubtractionScalarLeftDoubleCase2(); break;
        case 65: _t->operatorSubtractionTFDoubleCase1(); break;
        case 66: _t->operatorSubtractionTFDoubleCase2(); break;
        case 67: _t->operatorMultiplicationScalarDoubleCase1(); break;
        case 68: _t->operatorMultiplicationScalarDoubleCase2(); break;
        case 69: _t->operatorMultiplicationScalarLeftDoubleCase1(); break;
        case 70: _t->operatorMultiplicationScalarLeftDoubleCase2(); break;
        case 71: _t->operatorMultiplicationTFDoubleCase1(); break;
        case 72: _t->operatorMultiplicationTFDoubleCase2(); break;
        case 73: _t->operatorDivisionScalarDoubleCase1(); break;
        case 74: _t->operatorDivisionScalarDoubleCase2(); break;
        case 75: _t->operatorDivisionScalarLeftDoubleCase1(); break;
        case 76: _t->operatorDivisionScalarLeftDoubleCase2(); break;
        case 77: _t->operatorDivisionTFDoubleCase1(); break;
        case 78: _t->operatorDivisionTFDoubleCase2(); break;
        case 79: _t->stringConvertionCase1(); break;
        case 80: _t->stringConvertionCase2(); break;
        case 81: _t->stringConvertionCase3(); break;
        case 82: _t->stringConvertionCase4(); break;
        case 83: _t->pade(); break;
        case 84: _t->FOPDTCurvaDeReacao(); break;
        case 85: _t->FOPDTZieglerNichols(); break;
        case 86: _t->FOPDTSmith(); break;
        case 87: _t->FOPDTSundaresanKrishnaswamy(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TransferFunctionTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TransferFunctionTest.data,
      qt_meta_data_TransferFunctionTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *TransferFunctionTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TransferFunctionTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_TransferFunctionTest.stringdata0))
        return static_cast<void*>(const_cast< TransferFunctionTest*>(this));
    return QObject::qt_metacast(_clname);
}

int TransferFunctionTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 88)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 88;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 88)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 88;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
