#include <iostream>
#include <time.h>
#include "esp_system.h"
#include "rom/ets_sys.h"
#include "driver/ledc.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/timer.h"
#include "SistemasdeControle/headers/primitiveLibs/LinAlg/matrix.h"
#include "SistemasdeControle/embeddedTools/signalAnalysis/systemLoop.h"
#include "SistemasdeControle/embeddedTools/communicationLibs/wifi/wifista.h"
#include "I2Cdev.h"
#include "MPU6050.h"
#include "SistemasdeControle/embeddedTools/sensors/kalmanfilter.h"
#include "SistemasdeControle/embeddedTools/controlLibs/pid.h"

uint8_t modPin[4] = {27,4,12,5},
        levelPin[4]   = {13,19,14,18};
Devices::fes4channels dispositivo(levelPin,modPin,4);
ControlHandler::PID<double> pid[2];

bool flag = false;
Communication::WifiSTA wifi;

MPU6050 mpu1, mpu2(0x69);
int16_t ax1,ay1,az1,gx1,gy1,gz1;
int16_t ax2,ay2,az2,gx2,gy2,gz2;
double pitch1 = 0, roll1 = 0, fpitch1, froll1;
double pitch2 = 0, roll2 = 0, fpitch2, froll2;
double ref1, ref2;
KALMAN pfilter1(0.016), rfilter1(0.016), pfilter2(0.016), rfilter2(0.016);
esp_timer_handle_t periodic_timer;

int sign(double value) {  if (value > 0) return 1;  else return -1; }

#define GYRO_FULLSCALE			 (250)
#if   GYRO_FULLSCALE == 250
    #define GyroAxis_Sensitive (float)(131.0)
#endif

static void wifiCallback(Communication::WifiSTA &wifi1){   
    LinAlg::Matrix<double> code = wifi1.getData();
	std::cout << code;
    ref1 = code(0,0);
    ref2 = code(0,1);
    for(uint8_t i = 0; i < 4; ++i)
        dispositivo.fes[i].setPowerLevel(code(0,i)); 
    //wifi1 << str.str().c_str();
}

// static void mpuRead(void *para){
   
    // mpu1.getMotion6(&ax1, &ay1, &az1, &gx1, &gy1, &gz1);
    // pitch1 += 0.1 * (atan2(double(-ax1), sign(az1) * sqrt(double(az1 * az1) + double(ay1 * ay1))) * 57.2958 - pitch1);
    // roll1 +=  0.1 * ( atan2(double(-ay1), sqrt(double(az1 * az1) + double(ax1 * ax1))) * 57.2958 - roll1);
    // fpitch1 = pfilter1.filter(pitch1, gx1/GyroAxis_Sensitive);
    // froll1 = rfilter1.filter(roll1, gy1/GyroAxis_Sensitive);

    // mpu2.getMotion6(&ax2, &ay2, &az2, &gx2, &gy2, &gz2);
    // pitch2 += 0.1 * (atan2(double(-ax2), sqrt(double((az2) * (az2)) + double((ay2) * (ay2)))) * 57.2958 - pitch2);
    // roll2 += 0.1 * (atan2(double(-ay2), sqrt(double((az2) * (az2)) + double((ax2) * (ax2)))) * 57.2958 - roll2);
    // fpitch2 = pfilter2.filter(pitch2, gx2/GyroAxis_Sensitive);
    // froll2 = rfilter2.filter(roll2, gy2/GyroAxis_Sensitive);

    // Serial.print("Pitch:\t"); Serial.print(fpitch1-fpitch2); Serial.print("\t"); Serial.print(froll1-froll2); Serial.println("\t");

//OBS: tomar cuidado com o valor de saturação do pid, 
//     e somar o valor minimo do limiar motor 
    // double u = pid[0].OutputControl(ref1,fpitch1-fpitch2);
    // if (u > 0)
    //     dispositivo.fes[0].setPowerLevel(u); 
    // else
    //     dispositivo.fes[1].setPowerLevel(-u); 

    // u = pid[1].OutputControl(ref2,froll1-froll2);
    // if (u > 0)
    //     dispositivo.fes[2].setPowerLevel(u); 
    // else
    //     dispositivo.fes[3].setPowerLevel(-u);
// }

esp_timer_create_args_t periodic_timer_args;

void setup(){ 
    Serial.begin(115200);
    dispositivo.startLoop();  

    // periodic_timer_args.callback = &mpuRead;
    // periodic_timer_args.name = "ccdfkgdjf";
    // ESP_ERROR_CHECK(esp_timer_create(&periodic_timer_args, &periodic_timer));
    // ESP_ERROR_CHECK(esp_timer_start_periodic(periodic_timer, 16000));

    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    Wire.begin();
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
    Fastwire::setup(400, true);
    #endif

    Serial.begin(115200);

    // initialize device
    Serial.println("Initializing I2C devices...");
    mpu1.initialize();
    mpu2.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(mpu1.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
    Serial.println("Testing device connections...");
    Serial.println(mpu2.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
    mpu1.setXAccelOffset(88); mpu1.setYAccelOffset(-1021); mpu1.setZAccelOffset(1230);
    mpu1.setXGyroOffset (308); mpu1.setYGyroOffset (1); mpu1.setZGyroOffset (81);

    mpu2.setXAccelOffset(-2456); mpu2.setYAccelOffset(513); mpu2.setZAccelOffset(1344);
    mpu2.setXGyroOffset (-19); mpu2.setYGyroOffset (87); mpu2.setZGyroOffset (78);

    pid[0].setParams(1,0.001,0); pid[0].setSampleTime(0.016);
    pid[1].setParams(1,0.001,0); pid[1].setSampleTime(0.016);

    wifi.connect();
    wifi >> wifiCallback; 
  }

void loop(){
    mpu1.getMotion6(&ax1, &ay1, &az1, &gx1, &gy1, &gz1);
    pitch1 += 0.1 * (atan2(double(-ax1), sign(az1) * sqrt(double(az1 * az1) + double(ay1 * ay1))) * 57.2958 - pitch1);
    roll1 +=  0.1 * ( atan2(double(-ay1), sqrt(double(az1 * az1) + double(ax1 * ax1))) * 57.2958 - roll1);
    fpitch1 = pfilter1.filter(pitch1, gx1/GyroAxis_Sensitive);
    froll1 = rfilter1.filter(roll1, gy1/GyroAxis_Sensitive);

    mpu2.getMotion6(&ax2, &ay2, &az2, &gx2, &gy2, &gz2);
    pitch2 += 0.1 * (atan2(double(-ax2), sqrt(double((az2) * (az2)) + double((ay2) * (ay2)))) * 57.2958 - pitch2);
    roll2 += 0.1 * (atan2(double(-ay2), sqrt(double((az2) * (az2)) + double((ax2) * (ax2)))) * 57.2958 - roll2);
    fpitch2 = pfilter2.filter(pitch2, gx2/GyroAxis_Sensitive);
    froll2 = rfilter2.filter(roll2, gy2/GyroAxis_Sensitive);

    Serial.print("Pitch:\t"); Serial.print(fpitch1-fpitch2); Serial.print("\t"); Serial.print(froll1-froll2); Serial.println("\t");
    delay(16);
}